# -*- coding: utf-8 -*-
"""SNS_ACT3_2_AdriánYaredArmasdelaNuez.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gXhRBMJb-xtVsGL8iQ_y4qfzwr0a3G_h

**Adrián Yared Armas del a Nuez**

# Iris Dataset

## Imports
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB, MultinomialNB, CategoricalNB, ComplementNB, BernoulliNB
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.utils.multiclass import unique_labels

"""## Function to plot confusion matrix"""

# Function to plot confusion matrix
def plot_confusion_matrix(y_true, y_pred, classes,
                          normalize=False,
                          title=None,
                          cmap=plt.cm.Blues,
                          titleSup=None):
    """
    Prints and plots the confusion matrix. Normalization can be applied by setting `normalize=True`.
    """
    cm = confusion_matrix(y_true, y_pred)
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]

    fig, ax = plt.subplots()
    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)
    ax.figure.colorbar(im, ax=ax)
    ax.set(xticks=np.arange(cm.shape[1]),
           yticks=np.arange(cm.shape[0]),
           xticklabels=classes, yticklabels=classes,
           title=title,
           ylabel='True label',
           xlabel='Predicted label')

    plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
             rotation_mode="anchor")

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            ax.text(j, i, format(cm[i, j], fmt),
                    ha="center", va="center",
                    color="white" if cm[i, j] > thresh else "black")
    fig.tight_layout()
    fig.suptitle(titleSup, fontsize=16, y=1, ha='center')
    plt.show()

"""## Dataset"""

# Load Iris dataset
iris = sns.load_dataset('iris')
X_iris = iris.drop('species', axis=1)
y_iris = iris['species']

"""## Train & test"""

# Split into training and test sets
Xtrain, Xtest, ytrain, ytest = train_test_split(X_iris, y_iris, test_size=0.33, random_state=1)

"""## Classifiers"""

# Define classifiers
classifiers = {
    'GaussianNB': GaussianNB(),
    'MultinomialNB': MultinomialNB(),
    'ComplementNB': ComplementNB(),
    'BernoulliNB': BernoulliNB(),
    'CategoricalNB': CategoricalNB()
}

"""## Store results"""

# Store results
results = {}
clases_iris = np.array(['setosa', 'versicolor', 'virginica'])

for name, model in classifiers.items():
    try:
        # Train the model
        model.fit(Xtrain, ytrain)
        # Predict
        y_pred = model.predict(Xtest)
        # Evaluate
        acc = accuracy_score(ytest, y_pred)
        results[name] = {
            'accuracy': acc,
            'y_pred': y_pred
        }

        print(f"{name} - Accuracy: {acc:.2f}")

        # Convert categorical labels for the confusion matrix
        ytest_num = ytest.replace(['setosa', 'versicolor', 'virginica'], [0, 1, 2]).to_numpy()
        y_pred_num = pd.Series(y_pred).replace(['setosa', 'versicolor', 'virginica'], [0, 1, 2]).to_numpy()

        # Plot normalized confusion matrix
        plot_confusion_matrix(
            ytest_num, y_pred_num,
            classes=clases_iris,
            normalize=True,
            title=f'{name} - Normalized Confusion Matrix',
            titleSup=name
        )
    except Exception as e:
        print(f"{name} encountered an error: {e}")

"""## Summary comparison"""

# Summary of results
for name, result in results.items():
    print(f"{name}: Accuracy = {result['accuracy']:.2f}")

"""## Train & Test

# Penguin Dataset

## Imports
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB, MultinomialNB, ComplementNB, BernoulliNB, CategoricalNB
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.utils.multiclass import unique_labels
from sklearn.preprocessing import OrdinalEncoder

"""## Function to plot confusion matrix"""

# Function to plot confusion matrix
def plot_confusion_matrix(y_true, y_pred, classes,
                          normalize=False,
                          title=None,
                          cmap=plt.cm.Blues,
                          titleSup=None):
    """
    Prints and plots the confusion matrix. Normalization can be applied by setting `normalize=True`.
    """
    cm = confusion_matrix(y_true, y_pred)
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]

    fig, ax = plt.subplots()
    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)
    ax.figure.colorbar(im, ax=ax)
    ax.set(xticks=np.arange(cm.shape[1]),
           yticks=np.arange(cm.shape[0]),
           xticklabels=classes, yticklabels=classes,
           title=title,
           ylabel='True label',
           xlabel='Predicted label')

    plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
             rotation_mode="anchor")

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            ax.text(j, i, format(cm[i, j], fmt),
                    ha="center", va="center",
                    color="white" if cm[i, j] > thresh else "black")
    fig.tight_layout()
    fig.suptitle(titleSup, fontsize=16, y=1, ha='center')
    plt.show()

"""## Dataset"""

# Load Penguins dataset
penguins = sns.load_dataset('penguins').dropna()
X_penguins = penguins.drop('species', axis=1)
y_penguins = penguins['species']

"""## Code categorical features for CategoricalNB

"""

# Encode categorical features for CategoricalNB
categorical_features = X_penguins.select_dtypes(include=['object']).columns
encoder = OrdinalEncoder()
X_penguins_categorical = X_penguins.copy()
X_penguins_categorical[categorical_features] = encoder.fit_transform(X_penguins_categorical[categorical_features])

# Encode categorical features for other models
X_penguins_encoded = pd.get_dummies(X_penguins, drop_first=True)

"""## Train & test"""

# Split into training and test sets
Xtrain_cat, Xtest_cat, ytrain_cat, ytest_cat = train_test_split(X_penguins_categorical, y_penguins, test_size=0.33, random_state=1)
Xtrain, Xtest, ytrain, ytest = train_test_split(X_penguins_encoded, y_penguins, test_size=0.33, random_state=1)

"""## Classifiers"""

# Define classifiers
classifiers = {
    'GaussianNB': GaussianNB(),
    'MultinomialNB': MultinomialNB(),
    'ComplementNB': ComplementNB(),
    'BernoulliNB': BernoulliNB(),
    'CategoricalNB': CategoricalNB()
}

"""## Store results"""

# Store results
results = {}
clases_penguins = np.array(penguins['species'].unique())

for name, model in classifiers.items():
    try:
        if name == 'CategoricalNB':
            # Train and evaluate CategoricalNB
            model.fit(Xtrain_cat, ytrain_cat)
            y_pred = model.predict(Xtest_cat)
            acc = accuracy_score(ytest_cat, y_pred)
        else:
            # Train and evaluate other models
            model.fit(Xtrain, ytrain)
            y_pred = model.predict(Xtest)
            acc = accuracy_score(ytest, y_pred)

        results[name] = {
            'accuracy': acc,
            'y_pred': y_pred
        }

        print(f"{name} - Accuracy: {acc:.2f}")

        # Convert categorical labels for the confusion matrix
        ytest_num = ytest.replace(clases_penguins, range(len(clases_penguins))).to_numpy()
        if name == 'CategoricalNB':
            ytest_num = ytest_cat.replace(clases_penguins, range(len(clases_penguins))).to_numpy()
        y_pred_num = pd.Series(y_pred).replace(clases_penguins, range(len(clases_penguins))).to_numpy()

        # Plot normalized confusion matrix
        plot_confusion_matrix(
            ytest_num, y_pred_num,
            classes=clases_penguins,
            normalize=True,
            title=f'{name} - Normalized Confusion Matrix',
            titleSup=name
        )
    except Exception as e:
        print(f"{name} encountered an error: {e}")

"""## Summary comparison"""

# Summary of results
for name, result in results.items():
    print(f"{name}: Accuracy = {result['accuracy']:.2f}")