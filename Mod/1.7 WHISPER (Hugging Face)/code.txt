# Video utilizado:
# https://www.youtube.com/watch?v=RyLZipxUzgs

# Imports
import torch 
import unicodedata  # Manejo de Unicode
import re  # Manipulación de texto
from transformers import AutoModelForSpeechSeq2Seq, AutoProcessor, pipeline  # Herramientas de Hugging Face
from difflib import SequenceMatcher  # Comparar secuencias y calcular la similitud


# Configuración de dispositivo
device = "cuda:0" if torch.cuda.is_available() else "cpu"
torch_dtype = torch.float16 if torch.cuda.is_available() else torch.float32

# Cargar modelo
model_id = "openai/whisper-large-v3"
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    model_id, torch_dtype=torch_dtype, low_cpu_mem_usage=True, use_safetensors=True
)
model.to(device)

# Procesador
processor = AutoProcessor.from_pretrained(model_id)

# Pipeline de reconocimiento de voz
pipe = pipeline(
    "automatic-speech-recognition",
    model=model,
    tokenizer=processor.tokenizer,
    feature_extractor=processor.feature_extractor,
    torch_dtype=torch_dtype,
    device=device,
)

# Transcripción del audio
result = pipe("audio.mp3", return_timestamps=True)
texto = result["text"]

# Formatear el texto con saltos de línea
texto_con_saltos = texto.replace(", ", ".\n")
print("Texto transcrito con saltos de línea:\n", texto_con_saltos)

# Normalización del texto
def normalizar(texto):
    texto = unicodedata.normalize("NFD", texto)  # Descomponer caracteres
    texto = texto.encode("ascii", "ignore").decode("utf-8")  # Eliminar tildes
    texto = re.sub(r"[^\w\s]", "", texto)  # Quitar signos de puntuación
    texto = texto.lower()  # Convertir a minúsculas
    texto = re.sub(r"\s+", "", texto)  # Eliminar todos los espacios y saltos de línea
    return texto

# Leer y normalizar el texto original desde un archivo
with open("texto_audio_original.txt", "r", encoding="utf-8") as file:
    texto_original = file.read()

texto_normalizado = normalizar(texto)
texto_normalizado_original = normalizar(texto_original)

# Comparar los textos
def calcular_similitud(texto1, texto2):
    matcher = SequenceMatcher(None, texto1, texto2)
    return matcher.ratio() * 100  # Convertir a porcentaje

similitud = calcular_similitud(texto_normalizado, texto_normalizado_original)
error = 100 - similitud

# Mostrar resultados
print(f"Porcentaje de similitud: {similitud:.2f}%")
print(f"Porcentaje de error: {error:.2f}%")